now we need to:

2nd: work on the functionality of the Gui 
    -delete individidual channels and pulses
3rd: make the possibility for the pulses width to change for each loop iteration, and make the person choose when adding the pulse what happens to the pulses nearby if it either affetcs
                    - only the pulse (until it overlaps with another looop)
                    - only 
                    -   
    for this objective when the experiment is runned we will need to have a minimum or maximum amount of loops, which if the condition is not met must be warned

    a loop with a 1000 iterations can have max a 1000 diferent sequences

plan today: 
   1- THIS WAS ALL DONE USING THE TIMES THAT WERE ADJUSTED BY DELAYS, for the warnings and logi
    - fix vairable end_time_list
    - when adding a condition to a pulse, and then adding another pulse, we need to correct if the new pulse overlaps with the previous pulse (done)
    - check the iteration overlap warnings (done)
    - check the pulse overlap warnings (done)
    - show the correct iteration for overlapping (done)  if we overlap, show the iteration were it happens ex: i=20
    - change the iteration list, when changing channel (done)
    - make the pulses inthe combobox be ordered by time, this might fix next list out of range (done) ( fixed it by using All_list instead of pb_pulses in Show_varying_ function)
    - fix why its not showing overlapping when adding a new pulse that equals the previous pulse (done)
    - it says it overlaps in iteration 3, but you can save it at 3, fix it (done)
    - clear all these new variables (done)
    - fix bug on why its starting at 2 the end_time_list (done)
	(DONE)
    - lets say i have two pulses and i place one in between, 
      since the Pulse_Box keeps the time order the 2nd pulse will become 
      the new pulse (will this pulse steal the variations from the now 3rd pulse)?Iteration List 
      keeps the second pulse:
                find the order number of the new pulse using All_list
                update the variables of the pulses infront of the new pulse, self.Channel_Pulse_iter, self.Max_end_type,, 
	-update the iteration list and the self.Iretration_List_saving (Done)
    - register the max end time for the type 0 variation if and only if it is the last pulse, because it extends the whole sequence (DONE)


    
    - create an iteration_all=[ [channel,[pulse,[type,start,[iter],results],[type,start,[iter],results] ] ]] (Done)
        -update the pulses when a adding a pulse in between (Done)
    - get the results for the intended time variations (Done)
    - get the max number of iterations (Done)
    - make a simulation for the type cero variation (done)
    - add a function that grab the intervals of the pulses of a channel in either pb pulses or sequence pulses and orders them by time (Done)
    - when adding a bigger pulse first and then a sonner pulse, when i add a varition to the sooner pulse it says it overlaps in teration one, which is wrong, line 633 and 634 might be the issue i might have to order sequence_pulses and pb_pulses in time, also in lines 619 and 620 (done)
    - make the pulses to be in order on the simulation (Done)
    -alow for more pulses with more vairations
    -fix max end time update (Done)
    - fixed bug that dident incorporate pulsese with no iter from colors who were not green
    (DONE):
    -after running a simulation i cant add another pulse from another channel the sequence, i gotta fix this # in green works but in other channels it doesnt ( need to have a condition for the add change, to not accept it when there is a simulation.)
    - max value on the simulation should be per iteration (done)
    -ALL_list is not working (Done), (I was using the value of the channel for the index instead of the index of the channel)
    - self.max end time is not working correctly (DONE)
            -its only getting the values with iterations, which is fine
    - the iterations are ending before, for example if i have an iter from [0,2], its ending at 0 and then it doesnt return to its orginial size (DONE)
    - in self.Iteration_ALL pulses, when selecting a pulse in time of 100 and then 10, and then we add variaitons we notice that the pulse one is pulse 2 and viceversa, because of the added pulses condition we used (DONE) had to update the thingy
    - stil some pulses are not being added to the simulation (the second added channel, when having pusles that have iters makes confussion) (maybe)
    - Error overalpping on new pulses is allowed (maybe) because im missing one extra result in Iteration_ALL (done)
    - simulation taking pulse 1 with variations for pulse 2 and viceversa(DONE)
    -All_list channels suddenly change orientation
            -All_List: [[0, [0.0, 1.0], [5.0, 6.0], [7.0, 8.0]], [1, [2.0, 3.0], [4.0, 5.0], [7.0, 8.0]]]
            -All_List: [[0, [0.0, 1.0], [5.0, 6.0], [7.0, 8.0]], [2, [4.0, 5.0], [5.0, 6.0]], [1, [2.0, 3.0], [4.0, 5.0], [7.0, 8.0]]]
    - add a stop to the simulation (DONE)
    -fix that when adding only one channel with one pulse after the iterations it goes out (DONE)
    -tiempo total de todo el loop (), with the pulse blaster time next to the simulation (DONE)
        - when changing the loop value call the calculation of duration fucntion (Done)
        - error: the duration is being summed per channel (DONE)

SIMULAITON was done for intended
    -  NOW DO THE LOGIC FOR PB
        -create a list similar to Iteration_All but for the pb pulses, befreo create a all_list_pb like the all_list, have to adjust order intendedpulses (DONE)
                -Problem, is not adding a second channel(DONE)
                -Problem width size (CRITICAL)-->this convinced me to only relie on pb_pulses and not on intended pulses

change of plans, get rid of SEQUENCE PULSES, will only do it with pb_pulses, make copy and owrk on it (DONE)

-fix duration
    -when thre is no varying pulses, and increasing the loop iter (DONE)
    -pressing clear, resets the duration(DONE)
- fix added pulses for the delays and the width
       - warn the user when the real width becomes cero or less (DONE)
 (CRITICAL i ended up using the intended pulses only for graphing purposes, and pb pulses for all the logic behind it ) (DONE)
- fix not being able to go back to the same puylse after iter variations(DONE)

we do all the duration, simulation, graphing using intended pulses we do all the logi with pb_pulses 
    need to make sure the duration is made out of inteded pulses, because we base our time of recording on the intended ones



-problem: when adding delays the pb pulses width becoomes diferent from the intended pulse width ()
    SOLUTION:
    - the Iteration_ALl_PB should be made after calcuatin the resulting values of the iter using the intended Iteration_All results (DONE)
      this is because adjutsting for the delays is an addition operation, it should be done lastly. (DONE)

-add dashed lines to both the graph and the simulation showing the signals sent to the pulse blaster (the pb_pulses) (DONE)

-function, similar to update sequence, but for the pulse blaster, must use spinapi fucntions
    - fix All_lists (DONE)
    -make a list like [ [iter,[channels,[start,end]]], ]
    - there is a dip in the index 1 of the pulse blaster, iteration pb is not getting the correct pb width (DONE)
    - FIX REPETITION OF FIRST WIDTH ON FIRST " ITERATIONS (DONE)
    - finish building the spinapi function

    -its taking the pulse of one channel like if it was from another channel (DONE)
    -lets say i haven iteration range from 25,50 its and a loop til 50, the chahracteristic is being applied at the first iteration. (DONE)

    
    - make a list [pb,width]
    - send it to 
    - order code
        -makes it so that pulses are instances fo a class, and each iter is an instance of a pulse, and then each whole sequence is an instance of a 

-potential error: 
- lets say we have in pb ordered[] [(0,1),[1,5]],[1,[5,7]] should i add the delay on that channel for the second signal? or is it redundant?
- I shouldnt allow to move the whole sequence as i vary the pulses
- I can allow 
   
future objectives:
    - separate logic from gui 
        - logic must be an instance inside the class of the gui (DONE)
        - create slots in the gui for when the important changes to the interface, this slot must call the functions with the corresponding parameters from the gui, the logic must  through signals give the value back to the gui 
    - connect with signals
    - repeat the process for the the different types (the whole channels moves, move tao)
    - allow to save a template
    - instead of lists use classes (optional)
    - allow threading
    - make it work on the pb
    - make the remove button work perfectly 




objectives for luxury: 
    -create own channels
    -create tao (time between pulses, behave however we want per iteration)
    -separate logic from gui connection 
    -make an info menu for the user
    - allow adding 2 channels of the same color
    - allow menus over the simulations, one for the intended pulses and the ohter for the pb_pulses
    -make the remove button work perfectly 



